-- Generating Groups --------------------------------------------------------

-- Single-Column Grouping --

-- Single-column groups are the simplest and most-often-used type of grouping
-- This query generates one group for each actor, and then sums the number of
-- films for each member of the group.
SELECT 
    actor_id, COUNT(*)
FROM
    film_actor
GROUP BY actor_id;

-- Multicolumn Grouping --

-- In some cases, you may want to generate groups that span more than one column.

-- This query generates one group for each combination of actor
-- and film rating found by joining the film_actor table with the film table.
SELECT 
    fa.actor_id, f.rating, COUNT(*)
FROM
    film_actor AS fa
        INNER JOIN
    film AS f ON fa.film_id = f.film_id
GROUP BY fa.actor_id , f.rating
ORDER BY 1 , 2;

-- Grouping via Expressions --

-- Along with using columns to group data, you can build groups 
-- based on the values generated by expressions.
SELECT 
    EXTRACT(YEAR FROM rental_date) AS year, COUNT(*) AS how_many
FROM
    rental
GROUP BY EXTRACT(YEAR FROM rental_date);

-- Generating Rollups --

-- Before was showed an example that counts the number of films 
-- for each actor and film rating. Letâ€™s say, however, that along 
-- with the total count for each actor/rating combination, you also 
-- want total counts for each distinct actor.

-- Use the with rollup option to have the database server for it:
SELECT 
    fa.actor_id, f.rating, COUNT(*)
FROM
    film_actor AS fa
        INNER JOIN
    film AS f ON fa.film_id = f.film_id
GROUP BY fa.actor_id , f.rating WITH ROLLUP
ORDER BY 1 , 2;

-- Group Filter Conditions --

-- HAVING CLAUSE --
-- When grouping data, you also can apply filter conditions to the data after
-- the groups have been generated. The having clause is where you should place
-- these types of filter conditions. Consider the following example:

SELECT 
    fa.actor_id, f.rating, COUNT(*)
FROM
    film_actor fa
        INNER JOIN
    film f ON fa.film_id = f.film_id
WHERE
    f.rating IN ('G' , 'PG')
GROUP BY fa.actor_id , f.rating
HAVING COUNT(*) > 9;